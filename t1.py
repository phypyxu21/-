# 1. 先定义5类导体数据字典（与之前一致，确保数据完整）
conductor_data = {
    0.5: {"导体名称": "5类导体", "截面尺寸 mm²": 0.5, "导体结构 mm": "28/0.15", "单线偏差 mm": "0.15+0.002", "纹线外径 mm": 0.92, "铜消耗 kg/km": 4.5},
    0.75: {"导体名称": "5类导体", "截面尺寸 mm²": 0.75, "导体结构 mm": "41/0.15", "单线偏差 mm": "0.15+0.002", "纹线外径 mm": 1.13, "铜消耗 kg/km": 6.5},
    1: {"导体名称": "5类导体", "截面尺寸 mm²": 1, "导体结构 mm": "32/0.195", "单线偏差 mm": "0.195±0.002", "纹线外径 mm": 1.29, "铜消耗 kg/km": 8.6},
    1.5: {"导体名称": "5类导体", "截面尺寸 mm²": 1.5, "导体结构 mm": "47/0.195", "单线偏差 mm": "0.195±0.002", "纹线外径 mm": 1.57, "铜消耗 kg/km": 12.6},
    2.5: {"导体名称": "5类导体", "截面尺寸 mm²": 2.5, "导体结构 mm": "76/0.195", "单线偏差 mm": "0.195±0.002", "纹线外径 mm": 2.00, "铜消耗 kg/km": 20.4},
    4: {"导体名称": "5类导体", "截面尺寸 mm²": 4, "导体结构 mm": "54/0.295", "单线偏差 mm": "0.295±0.002", "纹线外径 mm": 2.55, "铜消耗 kg/km": 33.2},
    6: {"导体名称": "5类导体", "截面尺寸 mm²": 6, "导体结构 mm": "80/0.295 8+6股×12支", "单线偏差 mm": "0.295±0.002", "纹线外径 mm": 3.42, "铜消耗 kg/km": 49.2},
    10: {"导体名称": "5类导体", "截面尺寸 mm²": 10, "导体结构 mm": "80/0.395 8+6股×12支", "单线偏差 mm": "0.395±0.002", "纹线外径 mm": 4.49, "铜消耗 kg/km": 88.2},
    16: {"导体名称": "5类导体", "截面尺寸 mm²": 16, "导体结构 mm": "126/0.40", "单线偏差 mm": "±0.004", "纹线外径 mm": 5.90, "铜消耗 kg/km": 145},
    25: {"导体名称": "5类导体", "截面尺寸 mm²": 25, "导体结构 mm": "196/0.40", "单线偏差 mm": "±0.004", "纹线外径 mm": 7.28, "铜消耗 kg/km": 226},
    35: {"导体名称": "5类导体", "截面尺寸 mm²": 35, "导体结构 mm": "276/0.40", "单线偏差 mm": "±0.004", "纹线外径 mm": 9.31, "铜消耗 kg/km": 318},
    50: {"导体名称": "5类导体", "截面尺寸 mm²": 50, "导体结构 mm": "396/0.40", "单线偏差 mm": "±0.004", "纹线外径 mm": 10.13, "铜消耗 kg/km": 456},
    70: {"导体名称": "5类导体", "截面尺寸 mm²": 70, "导体结构 mm": "360/0.50", "单线偏差 mm": "±0.004", "纹线外径 mm": 12.12, "铜消耗 kg/km": 648},
    95: {"导体名称": "5类导体", "截面尺寸 mm²": 95, "导体结构 mm": "475/0.50", "单线偏差 mm": "±0.005", "纹线外径 mm": 14.00, "铜消耗 kg/km": 855},
    120: {"导体名称": "5类导体", "截面尺寸 mm²": 120, "导体结构 mm": "608/0.50", "单线偏差 mm": "±0.005", "纹线外径 mm": 15.24, "铜消耗 kg/km": 1093},
    150: {"导体名称": "5类导体", "截面尺寸 mm²": 150, "导体结构 mm": "760/0.50", "单线偏差 mm": "±0.005", "纹线外径 mm": 18.25, "铜消耗 kg/km": 1357},
    185: {"导体名称": "5类导体", "截面尺寸 mm²": 185, "导体结构 mm": "931/0.50", "单线偏差 mm": "±0.005", "纹线外径 mm": 19.14, "铜消耗 kg/km": 1674},
    240: {"导体名称": "5类导体", "截面尺寸 mm²": 240, "导体结构 mm": "1216/0.50", "单线偏差 mm": "±0.005", "纹线外径 mm": 22.07, "铜消耗 kg/km": 2183}
}

# 2. 功能1：统计所有导体的铜消耗总和与平均值
def calculate_copper_stats():
    total_copper = 0  # 铜消耗总和
    conductor_count = len(conductor_data)  # 导体规格数量
    # 遍历字典值，累加铜消耗
    for info in conductor_data.values():
        total_copper += info["铜消耗 kg/km"]
    avg_copper = total_copper / conductor_count  # 铜消耗平均值
    # 打印结果
    print("="*50)
    print("功能1：铜消耗统计结果")
    print(f"导体规格总数：{conductor_count} 种")
    print(f"铜消耗总和：{total_copper:.1f} kg/km")
    print(f"铜消耗平均值：{avg_copper:.1f} kg/km")
    print("="*50)

# 3. 功能2：筛选截面≥50mm²的大规格导体，并显示关键参数
def filter_large_conductors(min_section=50):
    large_conductors = []  # 存储大规格导体
    # 遍历键值对，筛选截面符合条件的导体
    for section, info in conductor_data.items():
        if section >= min_section:
            # 提取关键参数存入列表
            large_conductors.append({
                "截面尺寸 mm²": section,
                "纹线外径 mm": info["纹线外径 mm"],
                "铜消耗 kg/km": info["铜消耗 kg/km"]
            })
    # 打印筛选结果
    print("\n" + "="*50)
    print(f"功能2：筛选截面≥{min_section}mm²的大规格导体")
    print(f"符合条件的规格数量：{len(large_conductors)} 种")
    for conductor in large_conductors:
        print(f"截面：{conductor['截面尺寸 mm²']}mm² | 外径：{conductor['纹线外径 mm']}mm | 铜消耗：{conductor['铜消耗 kg/km']}kg/km")
    print("="*50)

# 4. 功能3：按纹线外径从小到大排序，展示截面与外径对应关系
def sort_by_outer_diameter():
    # 将字典键值对转为列表，按外径排序（key参数指定排序依据）
    sorted_conductors = sorted(conductor_data.items(), key=lambda x: x[1]["纹线外径 mm"])
    # 打印排序结果
    print("\n" + "="*50)
    print("功能3：按纹线外径排序结果（从小到大）")
    print(f"{'序号':<4} {'截面尺寸 mm²':<12} {'纹线外径 mm':<12}")
    print("-"*50)
    for i, (section, info) in enumerate(sorted_conductors, 1):
        print(f"{i:<4} {section:<12} {info['纹线外径 mm']:<12}")
    print("="*50)

# 5. 运行所有功能
if __name__ == "__main__":
    calculate_copper_stats()
    filter_large_conductors()
    sort_by_outer_diameter()